            var hookContainer = _meta.GetResourceHookContainer<TEntity>(ResourceHook.BeforeUpdate);
            var layer = _layerFactory.CreateLayer(entities);
            var uniqueEntities = layer.GetAllUniqueEntities().Cast<TEntity>();
            if (hookContainer != null)
            {
                var filteredUniqueEntities = hookContainer?.BeforeUpdate(uniqueEntities, pipeline, false);
                entities = entities.Intersect(filteredUniqueEntities);
            }
            EntityTreeLayer currentLayer = _layerFactory.CreateLayer(entities);

            foreach (var node in currentLayer)
            {
                var hookContainer = _meta.GetResourceHookContainer(node.EntityType, ResourceHook.BeforeUpdate);
                if (hookContainer != null)
                {

                    if (_meta.ShouldLoadDbValues(node.EntityType, ResourceHook.BeforeUpdate))
                    {
                        dbValues = _meta.LoadDbValues(entities, relationships, type);
                    }

                    var dbValues = LoadDbEntities();
                    var context = new HookExecutionContext<TEntity>(actionSource);
                    var diff = new EntityDiff<TEntity>(new HashSet<TEntity>(entities), dbEntities);
                    var parsedEntities = hookContainer.BeforeUpdate(diff, context);
                    ValidateHookResponse(parsedEntities, actionSource);
                    entities = parsedEntities;
                }
            }